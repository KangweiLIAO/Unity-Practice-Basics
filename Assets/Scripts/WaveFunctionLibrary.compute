// compute shader needs to contain a main function known as a kernel;
// each #kernel tells which function to compile; you can have many kernels
#pragma kernel FunctionKernel

#define PI 3.14159265358979323846 // define PI's value

RWStructuredBuffer<float3> _Positions; // buffer for read & write the point positions
uint _Resolution; // 
float _Step, _Time;

// [numthreads(1, 1, 1)] each group run only a single thread


float2 GetUV(uint3 id) {
	// get uv coordinate
	return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position) { // given an identifier and the position to set
	if (id.x < _Resolution && id.y < _Resolution) { // for pixels within resolution
		_Positions[id.x + id.y * _Resolution] = position; // store 2D data sequentially in a 1D array.
	}
}

float3 Wave (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + v + t));
	p.z = v;
	return p;
}

// Each thread is identified by a vector of three unsigned integers (uint3)
[numthreads(8, 8, 1)] // gives us the 64 threads presented as a 2D 8*8 square grid, since we define our graph points based on 2D UV
void FunctionKernel(uint3 id: SV_DispatchThreadID) { // have to explicitly indicate that {id} is for the thread identifier
float2 uv = GetUV(id);
SetPosition(id, Wave(uv.x, uv.y, _Time));
}